Pen: a game based on the photoshop pen tool

- : uncompleted
+ : completed
? : maybe
> : not implementing (with comment)

error handling
  - all over the codebase I use int instead of bool. I should stop that.
       for some cases it makes sense, 
       e.g. rprintf returning either number of chars or negative number for error
  - create a custom error-as-value type. guess what? it will be int. 
       but at least use it consistently, maybe create some enum values.
directory structure
  - separate source/include folders
  - find a way to cleanly separate backend implementations
         e.g. SDL2 folder, GLFW3 folder.
r
  + improve texture handle system 
  + improve color constants
sdl
  + sdl backend
glfw
  + glfw backend
  + find a way to interface pollevent/callbacks.
      implemented queue structure.
  - improve queue structure.
  - fix keycodes. fallback to ASCII?
  ? multithreading
  - decrease coupling between input & renderer. e.g. getwindow, setwindow LOL.
font
  > implement a 2 stage font loading stage, store each characters position, offset, etc.
  >    save to a custom file format.
  >    ensure integrity of saved data. CRC?
  >  stage 1: convert a ttf file to an 1-channel bitmap
  >  stage 2: load custom file, expand 1-channel bitmap to 4-channel bitmap (only needed with SDL2 backend!), 
     create texture, load position & offsets into memory.
  > implement a font storage/caching system.
  >   perhaps a stack? (look into imgui)
      Don't bother with TTF fonts.
  + BDF to Hex python script. font loader.
  ? multilingual
    ? support both bdf and ttf
  + separate font data from font implementation  
trans
  + separate world, screen coords.
  + perhaps use screen coords for ui, world coords for polybezier map, allowing for panning and zooming.
  + impose a world limit.
  > invertible matrix?
  > split into matrix operations, vector operations?
        don't bother with a matrix, pan/zoom is enough. I don't care for rotations.
  ? 3x3 matrix, OpenGL integration.
math
  - separate math code from trans.c
  - better function naming
polybezier
  + move along curve at a fixed speed
  - cache normals for rotation?
  - rewrite cbplot
entity 
  + add entity system
  - add classes of entities
  - add entity sprites with animations
level
  - add start zone, end zone.
  - add blocking wall type
  - add collision detection
  - add shooter enemy
    - rotation
    - bullet system
  - support multiple levels
  - level selector
  - level descriptions
